// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // Used for direct connections to the database
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(STAFF)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sales     Sale[]
}

enum Role {
  ADMIN
  STAFF
}

model Product {
  id          String     @id @default(cuid())
  name        String
  description String?
  price       Float
  stock       Int
  image       String?    // URL ng image
  category    Category   @relation(fields: [categoryId], references: [id])
  categoryId  String
  saleItems   SaleItem[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Customer {
  id        String   @id @default(uuid())
  name      String
  email     String?  @unique
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sales     Sale[]
}

model Sale {
  id         String     @id @default(uuid())
  customerId String?
  customer   Customer?  @relation(fields: [customerId], references: [id])
  userId     String
  user       User       @relation(fields: [userId], references: [id])
  items      SaleItem[]
  subtotal   Float
  tax        Float
  total      Float
  cashGiven  Float?
  change     Float?
  status     SaleStatus @default(COMPLETED)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model SaleItem {
  id        String   @id @default(uuid())
  saleId    String
  sale      Sale     @relation(fields: [saleId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  subtotal  Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SaleStatus {
  PENDING
  COMPLETED
  CANCELLED
}
